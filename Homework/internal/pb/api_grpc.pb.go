// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: api.proto

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PickupPoints_Add_FullMethodName     = "/pickup_points.PickupPoints/Add"
	PickupPoints_GetById_FullMethodName = "/pickup_points.PickupPoints/GetById"
	PickupPoints_Delete_FullMethodName  = "/pickup_points.PickupPoints/Delete"
	PickupPoints_Update_FullMethodName  = "/pickup_points.PickupPoints/Update"
	PickupPoints_List_FullMethodName    = "/pickup_points.PickupPoints/List"
)

// PickupPointsClient is the client API for PickupPoints service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PickupPointsClient interface {
	Add(ctx context.Context, in *PickupPointRequest, opts ...grpc.CallOption) (*PickupPointId, error)
	GetById(ctx context.Context, in *PickupPointId, opts ...grpc.CallOption) (*PickupPointWithId, error)
	Delete(ctx context.Context, in *PickupPointId, opts ...grpc.CallOption) (*empty.Empty, error)
	Update(ctx context.Context, in *PickupPointWithId, opts ...grpc.CallOption) (*empty.Empty, error)
	List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PickupPointResponseList, error)
}

type pickupPointsClient struct {
	cc grpc.ClientConnInterface
}

func NewPickupPointsClient(cc grpc.ClientConnInterface) PickupPointsClient {
	return &pickupPointsClient{cc}
}

func (c *pickupPointsClient) Add(ctx context.Context, in *PickupPointRequest, opts ...grpc.CallOption) (*PickupPointId, error) {
	out := new(PickupPointId)
	err := c.cc.Invoke(ctx, PickupPoints_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pickupPointsClient) GetById(ctx context.Context, in *PickupPointId, opts ...grpc.CallOption) (*PickupPointWithId, error) {
	out := new(PickupPointWithId)
	err := c.cc.Invoke(ctx, PickupPoints_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pickupPointsClient) Delete(ctx context.Context, in *PickupPointId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, PickupPoints_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pickupPointsClient) Update(ctx context.Context, in *PickupPointWithId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, PickupPoints_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pickupPointsClient) List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PickupPointResponseList, error) {
	out := new(PickupPointResponseList)
	err := c.cc.Invoke(ctx, PickupPoints_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PickupPointsServer is the server API for PickupPoints service.
// All implementations must embed UnimplementedPickupPointsServer
// for forward compatibility
type PickupPointsServer interface {
	Add(context.Context, *PickupPointRequest) (*PickupPointId, error)
	GetById(context.Context, *PickupPointId) (*PickupPointWithId, error)
	Delete(context.Context, *PickupPointId) (*empty.Empty, error)
	Update(context.Context, *PickupPointWithId) (*empty.Empty, error)
	List(context.Context, *empty.Empty) (*PickupPointResponseList, error)
	mustEmbedUnimplementedPickupPointsServer()
}

// UnimplementedPickupPointsServer must be embedded to have forward compatible implementations.
type UnimplementedPickupPointsServer struct {
}

func (UnimplementedPickupPointsServer) Add(context.Context, *PickupPointRequest) (*PickupPointId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedPickupPointsServer) GetById(context.Context, *PickupPointId) (*PickupPointWithId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedPickupPointsServer) Delete(context.Context, *PickupPointId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPickupPointsServer) Update(context.Context, *PickupPointWithId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPickupPointsServer) List(context.Context, *empty.Empty) (*PickupPointResponseList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPickupPointsServer) mustEmbedUnimplementedPickupPointsServer() {}

// UnsafePickupPointsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PickupPointsServer will
// result in compilation errors.
type UnsafePickupPointsServer interface {
	mustEmbedUnimplementedPickupPointsServer()
}

func RegisterPickupPointsServer(s grpc.ServiceRegistrar, srv PickupPointsServer) {
	s.RegisterService(&PickupPoints_ServiceDesc, srv)
}

func _PickupPoints_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PickupPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PickupPointsServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PickupPoints_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PickupPointsServer).Add(ctx, req.(*PickupPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PickupPoints_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PickupPointId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PickupPointsServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PickupPoints_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PickupPointsServer).GetById(ctx, req.(*PickupPointId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PickupPoints_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PickupPointId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PickupPointsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PickupPoints_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PickupPointsServer).Delete(ctx, req.(*PickupPointId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PickupPoints_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PickupPointWithId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PickupPointsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PickupPoints_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PickupPointsServer).Update(ctx, req.(*PickupPointWithId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PickupPoints_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PickupPointsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PickupPoints_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PickupPointsServer).List(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// PickupPoints_ServiceDesc is the grpc.ServiceDesc for PickupPoints service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PickupPoints_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pickup_points.PickupPoints",
	HandlerType: (*PickupPointsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _PickupPoints_Add_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _PickupPoints_GetById_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PickupPoints_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PickupPoints_Update_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PickupPoints_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

const (
	Orders_AcceptOrderFromCourier_FullMethodName = "/pickup_points.Orders/AcceptOrderFromCourier"
	Orders_ReturnOrderToCourier_FullMethodName   = "/pickup_points.Orders/ReturnOrderToCourier"
	Orders_GiveOrder_FullMethodName              = "/pickup_points.Orders/GiveOrder"
	Orders_AcceptRefund_FullMethodName           = "/pickup_points.Orders/AcceptRefund"
	Orders_GetOrders_FullMethodName              = "/pickup_points.Orders/GetOrders"
	Orders_GetListRefund_FullMethodName          = "/pickup_points.Orders/GetListRefund"
)

// OrdersClient is the client API for Orders service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrdersClient interface {
	AcceptOrderFromCourier(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ReturnOrderToCourier(ctx context.Context, in *OrderId, opts ...grpc.CallOption) (*empty.Empty, error)
	GiveOrder(ctx context.Context, in *OrderIdList, opts ...grpc.CallOption) (*empty.Empty, error)
	AcceptRefund(ctx context.Context, in *RefundRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetOrders(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*OrderResponseList, error)
	GetListRefund(ctx context.Context, in *GetListRefundRequest, opts ...grpc.CallOption) (*OrderResponseList, error)
}

type ordersClient struct {
	cc grpc.ClientConnInterface
}

func NewOrdersClient(cc grpc.ClientConnInterface) OrdersClient {
	return &ordersClient{cc}
}

func (c *ordersClient) AcceptOrderFromCourier(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Orders_AcceptOrderFromCourier_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersClient) ReturnOrderToCourier(ctx context.Context, in *OrderId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Orders_ReturnOrderToCourier_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersClient) GiveOrder(ctx context.Context, in *OrderIdList, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Orders_GiveOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersClient) AcceptRefund(ctx context.Context, in *RefundRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Orders_AcceptRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersClient) GetOrders(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*OrderResponseList, error) {
	out := new(OrderResponseList)
	err := c.cc.Invoke(ctx, Orders_GetOrders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersClient) GetListRefund(ctx context.Context, in *GetListRefundRequest, opts ...grpc.CallOption) (*OrderResponseList, error) {
	out := new(OrderResponseList)
	err := c.cc.Invoke(ctx, Orders_GetListRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrdersServer is the server API for Orders service.
// All implementations must embed UnimplementedOrdersServer
// for forward compatibility
type OrdersServer interface {
	AcceptOrderFromCourier(context.Context, *OrderRequest) (*empty.Empty, error)
	ReturnOrderToCourier(context.Context, *OrderId) (*empty.Empty, error)
	GiveOrder(context.Context, *OrderIdList) (*empty.Empty, error)
	AcceptRefund(context.Context, *RefundRequest) (*empty.Empty, error)
	GetOrders(context.Context, *GetRequest) (*OrderResponseList, error)
	GetListRefund(context.Context, *GetListRefundRequest) (*OrderResponseList, error)
	mustEmbedUnimplementedOrdersServer()
}

// UnimplementedOrdersServer must be embedded to have forward compatible implementations.
type UnimplementedOrdersServer struct {
}

func (UnimplementedOrdersServer) AcceptOrderFromCourier(context.Context, *OrderRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptOrderFromCourier not implemented")
}
func (UnimplementedOrdersServer) ReturnOrderToCourier(context.Context, *OrderId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnOrderToCourier not implemented")
}
func (UnimplementedOrdersServer) GiveOrder(context.Context, *OrderIdList) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GiveOrder not implemented")
}
func (UnimplementedOrdersServer) AcceptRefund(context.Context, *RefundRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptRefund not implemented")
}
func (UnimplementedOrdersServer) GetOrders(context.Context, *GetRequest) (*OrderResponseList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrders not implemented")
}
func (UnimplementedOrdersServer) GetListRefund(context.Context, *GetListRefundRequest) (*OrderResponseList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListRefund not implemented")
}
func (UnimplementedOrdersServer) mustEmbedUnimplementedOrdersServer() {}

// UnsafeOrdersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrdersServer will
// result in compilation errors.
type UnsafeOrdersServer interface {
	mustEmbedUnimplementedOrdersServer()
}

func RegisterOrdersServer(s grpc.ServiceRegistrar, srv OrdersServer) {
	s.RegisterService(&Orders_ServiceDesc, srv)
}

func _Orders_AcceptOrderFromCourier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServer).AcceptOrderFromCourier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orders_AcceptOrderFromCourier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServer).AcceptOrderFromCourier(ctx, req.(*OrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orders_ReturnOrderToCourier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServer).ReturnOrderToCourier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orders_ReturnOrderToCourier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServer).ReturnOrderToCourier(ctx, req.(*OrderId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orders_GiveOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderIdList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServer).GiveOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orders_GiveOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServer).GiveOrder(ctx, req.(*OrderIdList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orders_AcceptRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServer).AcceptRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orders_AcceptRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServer).AcceptRefund(ctx, req.(*RefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orders_GetOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServer).GetOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orders_GetOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServer).GetOrders(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orders_GetListRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServer).GetListRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orders_GetListRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServer).GetListRefund(ctx, req.(*GetListRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Orders_ServiceDesc is the grpc.ServiceDesc for Orders service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Orders_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pickup_points.Orders",
	HandlerType: (*OrdersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AcceptOrderFromCourier",
			Handler:    _Orders_AcceptOrderFromCourier_Handler,
		},
		{
			MethodName: "ReturnOrderToCourier",
			Handler:    _Orders_ReturnOrderToCourier_Handler,
		},
		{
			MethodName: "GiveOrder",
			Handler:    _Orders_GiveOrder_Handler,
		},
		{
			MethodName: "AcceptRefund",
			Handler:    _Orders_AcceptRefund_Handler,
		},
		{
			MethodName: "GetOrders",
			Handler:    _Orders_GetOrders_Handler,
		},
		{
			MethodName: "GetListRefund",
			Handler:    _Orders_GetListRefund_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
